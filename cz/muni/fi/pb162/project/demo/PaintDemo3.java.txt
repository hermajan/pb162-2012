package cz.muni.fi.pb162.project.demo;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.util.List;
import java.util.ArrayList;

import cz.muni.fi.pb162.project.geometry.Triangle;
import cz.muni.fi.pb162.project.geometry.Vertex2D;
import cz.muni.fi.pb162.project.geometry.Circle;
import cz.muni.fi.pb162.project.geometry.GeneralRegularPolygon;

/**
 * 
 * Trida umoznujici vykresleni doposud dokoncenych grafickych objektu (bod, kruznici, trojuhelnik a polygon) a umoznuje urcit, zda-li ma byt obrazek vyplnen barvou ci nikoliv.
 * 
 * @author Bc. Pavel Beran (255625)
 * @version 2012-10-23
 *
 */

public class PaintDemo3 extends JFrame {

    /**
     * Znaci polovinu delky usecky pro vykresleni bodu.
     */
    public static final int VERT_LENGTH = 3;

    protected JPanel panel;
    
    private List<Vertex2D> vertices = new ArrayList<Vertex2D>();
    private List<Circle> circles = new ArrayList<Circle>();
    private List<Triangle> triangles = new ArrayList<Triangle>();
    private List<GeneralRegularPolygon> polygons = new ArrayList<GeneralRegularPolygon>();
    
    private List<Boolean> fillCircles = new ArrayList<Boolean>();
    private List<Boolean> fillTriangles = new ArrayList<Boolean>();
    private List<Boolean> fillPolygons = new ArrayList<Boolean>();
    
    private Color vertexColor;
    private Color circleColor;
    private Color triangleColor;
    private Color polygonColor;

    /**
     * Defaultni konstruktor nastavi defaultni barvy pro telesa. Pozadi bile, body cervene, kruznice modre, trojuhelniky zelene, n-uhelniky tyrkisove
     */
    public PaintDemo3() {
        this(Color.WHITE, Color.RED, Color.BLUE, Color.GREEN, new Color(100, 220, 230));
    }
    
    /**
     * Konstruktor umoznuje nastavit barvu pozadi. Body cervene, kruznice modre, trojuhelniky zelene, n-uhelniky tyrkisove
     * 
     * @param backgroundColor Barva pro pozadi
     */
    public PaintDemo3(Color backgroundColor) {
        this(backgroundColor, Color.RED, Color.BLUE, Color.GREEN, new Color(100, 220, 230));
    }

    /**
     * Konstruktor umoznuje nastavit barvu teles. Pozadi bile.
     * 
     * @param vertexColor Barva pro body
     * @param circleColor Barva pro kruznice
     * @param triangleColor Barva pro trojuhelniky
     * @param polygonColor Barva pro n-uhelniky
     */
    public PaintDemo3(Color vertexColor, Color circleColor, Color triangleColor, Color polygonColor) {
        this(Color.WHITE, vertexColor, circleColor, triangleColor, polygonColor);
    }

    /**
     * Konstruktor umoznuje nastavit vsechny barvy.
     * 
     * @param backgroundColor Barva pro pozadi
     * @param vertexColor Barva pro body
     * @param circleColor Barva pro kruznice
     * @param triangleColor Barva pro trojuhelniky
     * @param polygonColor Barva pro n-uhelniky
     */
    public PaintDemo3(Color backgroundColor, Color vertexColor, Color circleColor, Color triangleColor, Color polygonColor) {
        initialize();
        panel.setBackground(backgroundColor);
        this.vertexColor = vertexColor;
        this.circleColor = circleColor;
        this.triangleColor = triangleColor;
        this.polygonColor = polygonColor;
    }
    
    private void initialize() {
        panel = new JPanel();
        setBounds(100, 100, 800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("Vizualizace obrazc≈Ø. Autor Pavel Beran (255625).");
        add(panel);
        setVisible(true);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        myPaintAll(panel.getGraphics());
    }
    
    /**
     * Spustenim metody zacne vykreslovani vsech teles v seznamech.
     */
    public void startPainting() {
        paint(this.getGraphics());
    }
    
    /**
     * Metoda pro pridani bodu do seznamu pro vykresleni.
     * Metoda vraci logickou hodnotu v zavislosti na tom zda-li neni bod mimo vykreslovaci prostor.
     * 
     * @param vertex Bod ktery chci vykreslit
     * @return true pokud se bod vykresli, false nikoliv
     */
    public boolean paintVertex(Vertex2D vertex) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        int x = width - ((int) Math.rint(halfX - vertex.getX()));
        int y = (int) Math.rint(halfY - vertex.getY());
        
        if (x-VERT_LENGTH < 0 || x+VERT_LENGTH > width || y-VERT_LENGTH < 0 || y+VERT_LENGTH > height) {
            return false;
        }
        vertices.add(vertex);
        return true;
    }

    /**
     * Metoda pro pridani kruznice do seznamu pro vykresleni.
     * Metoda vraci logickou hodnotu v zavislosti na tom zda-li neni kruznice mimo vykreslovaci prostor.
     * 
     * @param circle Kruznice kterou chci vykreslit
     * @param fill Jestli ma byt kruznice vyplnena ci nikoliv
     * @return true pokud se kruznice vykresli, false nikoliv
     */
    public boolean paintCircle(Circle circle, boolean fill) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        int x = width - ((int) Math.rint(halfX - circle.getCenter().getX()));
        int y = (int) Math.rint(halfY - circle.getCenter().getY());
        int r = (int) circle.getRadius();
        
        if (x-r < 0 || x+r > width || y-r < 0 || y+r > height) {
            return false;
        }
        circles.add(circle);
        fillCircles.add(fill);
        return true;
    }
    
    /**
     * Metoda pro pridani kruznice do seznamu pro vykresleni, kruznice nebude vyplnena barvou.
     * Metoda vraci logickou hodnotu v zavislosti na tom zda-li neni kruznice mimo vykreslovaci prostor.
     * 
     * @param circle Kruznice kterou chci vykreslit
     * @return true pokud se kruznice vykresli, false nikoliv
     */
    public boolean paintCircle(Circle circle) {
        return paintCircle(circle, false);
    }

    /**
     * Metoda pro pridani trojuhelnika do seznamu pro vykresleni.
     * Metoda vraci logickou hodnotu v zavislosti na tom zda-li neni trojuhelnik mimo vykreslovaci prostor.
     * 
     * @param triangle Trojuhelnik ktery chci vykreslit
     * @param fill Jestli se ma trojuhelnik vyplnit nebo nikoliv
     * @return true pokud se trojuhelnik vykresli, false nikoliv
     */
    public boolean paintTriangle(Triangle triangle, boolean fill) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        Vertex2D a = triangle.getVertexA();
        Vertex2D b = triangle.getVertexB();
        Vertex2D c = triangle.getVertexC();
        
        int minX = width - ((int) Math.rint(halfX - Math.min(a.getX(), Math.min(b.getX(), c.getX()))));
        int maxX = width - ((int) Math.rint(halfX - Math.max(a.getX(), Math.max(b.getX(), c.getX()))));
        int minY = (int) Math.rint(halfY - Math.min(a.getY(), Math.min(b.getY(), c.getY())));
        int maxY = (int) Math.rint(halfY - Math.max(a.getY(), Math.max(b.getY(), c.getY())));
        
        if (minX < 0 || maxX > width || minY < 0 || maxY > height) {
            return false;
        }
        triangles.add(triangle);
        fillTriangles.add(fill);
        return true;
    }
    
    /**
     * Metoda pro pridani trojuhelnika do seznamu pro vykresleni, trojuhelnik nebude vyplnen barvou.
     * Metoda vraci logickou hodnotu v zavislosti na tom zda-li neni trojuhelnik mimo vykreslovaci prostor.
     * 
     * @param triangle Trojuhelnik ktery chci vykreslit
     * @param fill Jestli se ma trojuhelnik vyplnit nebo nikoliv
     * @return true pokud se trojuhelnik vykresli, false nikoliv
     */
    public boolean paintTriangle(Triangle triangle) {
        return paintTriangle(triangle, false);
    }
    
    /**
     * Metoda pro pridani polygonu do seznamu pro vykresleni.
     * Metoda vraci logickou hodnotu v zavislosti na tom zda-li neni polygon mimo vykreslovaci prostor.
     * 
     * @param polygon Polygon ktery chci vykreslit
     * @param fill Jestli ma byt polygon vyplneny ci nikoliv
     * @return true pokud se polygon vykresli, false nikoliv
     */
    public boolean paintRegularPolygon(GeneralRegularPolygon polygon, boolean fill) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        int x = width - ((int) Math.rint(halfX - polygon.getCenter().getX()));
        int y = (int) Math.rint(halfY - polygon.getCenter().getY());
        int r = (int) polygon.getRadius();
        
        if (x-r < 0 || x+r > width || y-r < 0 || y+r > height) {
            return false;
        }
        polygons.add(polygon);
        fillPolygons.add(fill);
        return true;
    }
    
    /**
     * Metoda pro pridani polygonu do seznamu pro vykresleni, polygon nebude vyplnen barvou.
     * Metoda vraci logickou hodnotu v zavislosti na tom zda-li neni polygon mimo vykreslovaci prostor.
     * 
     * @param polygon Polygon ktery chci vykreslit
     * @return true pokud se polygon vykresli, false nikoliv
     */
    public boolean paintRegularPolygon(GeneralRegularPolygon polygon) {
        return paintRegularPolygon(polygon, false);
    }
    
    protected void paintVertex(Graphics g, Vertex2D v) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        int x = width - ((int) Math.rint(halfX - v.getX()));
        int y = (int) Math.rint(halfY - v.getY());
        g.setColor(vertexColor);
        g.drawLine(x-VERT_LENGTH, y+VERT_LENGTH, x+VERT_LENGTH, y-VERT_LENGTH);
        g.drawLine(x-VERT_LENGTH, y-VERT_LENGTH, x+VERT_LENGTH, y+VERT_LENGTH);
    }
    
    protected void paintCircle(Graphics g, Circle c, boolean fill) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        int r = (int) Math.rint(c.getRadius());
        int x = width - ((int) Math.rint(halfX - c.getCenter().getX()) + r);
        int y = (int) Math.rint(halfY - c.getCenter().getY()) - r;
        int w = (int) Math.rint(c.getWidth());
        int h = (int) Math.rint(c.getHeight());
        g.setColor(circleColor);
        if (fill) {
            g.fillOval(x, y, w, h);
        } else {
            g.drawOval(x, y, w, h);
        }

    }
    
    protected void paintTriangle(Graphics g, Triangle tri, boolean fill) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        int a1 = width - ((int) Math.rint(halfX - tri.getVertexA().getX()));
        int a2 = (int) Math.rint(halfY - tri.getVertexA().getY());
        int b1 = width - ((int) Math.rint(halfX - tri.getVertexB().getX()));
        int b2 = (int) Math.rint(halfY - tri.getVertexB().getY());
        int c1 = width - ((int) Math.rint(halfX - tri.getVertexC().getX()));
        int c2 = (int) Math.rint(halfY - tri.getVertexC().getY());

        g.setColor(triangleColor);
        if (fill) {
            g.fillPolygon(new int[] {a1, b1, c1}, new int[] {a2, b2, c2}, 3);
        } else {
            g.drawPolygon(new int[] {a1, b1, c1}, new int[] {a2, b2, c2}, 3);
        }
    }
    
    protected void paintPolygon(Graphics g, GeneralRegularPolygon polygon, boolean fill) {
        if (polygon instanceof Circle) {
            paintCircle(g, (Circle) polygon, fill);
            return;
        }
        
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        g.setColor(polygonColor);
        int[] yVertex = new int[polygon.getNumEdges()];
        int[] xVertex = new int[polygon.getNumEdges()];
        
        for (int i = 0; i < polygon.getNumEdges(); i++) {
            xVertex[i] = (int) ((halfX + polygon.getCenter().getX()) - polygon.getRadius() * Math.cos(i * 2 * Math.PI / polygon.getNumEdges()));
            yVertex[i] = (int) ((halfY - polygon.getCenter().getY()) - polygon.getRadius() * Math.sin(i * 2 * Math.PI / polygon.getNumEdges()));
        }
        if (fill) {
            g.fillPolygon(xVertex, yVertex, polygon.getNumEdges());
        } else {
            g.drawPolygon(xVertex, yVertex, polygon.getNumEdges());
        }
    }
    
    protected void paintCross(Graphics g) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        int halfX = width/2;
        int halfY = height/2;
        
        g.setColor(Color.BLACK);
        g.drawLine(0, halfY, width, halfY);
        g.drawLine(halfX, 0, halfX, height);
    }
    
    protected void myPaintAll(Graphics g) {
        paintCross(g);
        for (Vertex2D v : vertices) {
            paintVertex(g, v);
        }
        for (int i = 0; i < circles.size(); i++) {
            paintCircle(g, circles.get(i), fillCircles.get(i));
        }
        for (int i = 0; i < triangles.size(); i++) {
            paintTriangle(g, triangles.get(i), fillTriangles.get(i));
        }
        for (int i = 0; i < polygons.size(); i++) {
            paintPolygon(g, polygons.get(i), fillPolygons.get(i));
        }
    }
}
